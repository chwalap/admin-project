version: '3.9'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - 2181:2181
    networks:
      - net

  kafka:
    build: ./kafka
    ports:
      - 29092:29092
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_CREATE_TOPICS: "test:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net

  hivemq:
    image: hivemq/hivemq4:latest
    restart: always
    ports:
      - 1883:1883
      - 8080:8080
      - 8000:8000

  mqtt2kafkabridge:
    image: marmaechler/mqtt2kafkabridge:latest
    depends_on:
      - kafka
      - hivemq
    restart: always
    environment:
      KAFKA_BROKER_HOST: kafka:9092
      MQTT_BROKER_HOST: hivemq:1883
    volumes:
      - ./mqtt2kafkabridge/logs:/opt/mqtt2kafkabridge/logs

  mongo:
    image: mongo
    ports:
      - 27017:27017
    networks:
      - net
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - db:/data/db

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    networks:
      - net
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password

volumes:
  db:
  data:
  logs:

networks:
  net:
