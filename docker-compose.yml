version: "3.2"

services:
  mosquitto:
    image: mosquitto
    hostname: mosquitto
    container_name: mosquitto
    build:
      context: .
      dockerfile: ./mosquitto/Dockerfile
      cache_from:
        - eclipse-mosquitto:latest
    ports:
      - "1883:1883"
    expose:
      - "1883"
    restart: unless-stopped

  weather-service:
    image: weather-service
    hostname: weather-service
    container_name: weather-service
    build:
      context: .
      dockerfile: ./weather-service/Dockerfile
      cache_from:
        - eclipse-mosquitto:latest
    depends_on:
      - mosquitto
    restart: unless-stopped

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    build:
      context: .
      dockerfile: ./zookeeper/Dockerfile
      cache_from:
        - zookeeper:latest
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zookeeper:2888:3888
    volumes:
      - ./data/zookeeper:/data
      - ./logs/zookeeper:/datalog
    restart: unless-stopped

  kafka:
    image: kafka
    hostname: kafka
    container_name: kafka
    build:
      context: .
      dockerfile: ./kafka/Dockerfile
      cache_from:
        - confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    volumes:
      - ./data/kafka:/var/lib/kafka/data
    depends_on:
      - zookeeper
    restart: unless-stopped
    logging:
      driver: none

  kafka-connect:
    image: kafka-connect
    hostname: kafka-connect
    container_name: kafka-connect
    build:
      context: .
      dockerfile: ./kafka-connect/Dockerfile
      cache_from:
        - confluentinc/cp-kafka-connect:latest
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/etc/kafka-connect/jars'
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
    ports:
      - "8083:8083"
    volumes:
      - ./connectors/jars:/etc/kafka-connect/jars
    depends_on:
      - zookeeper
      - kafka
      - mosquitto
    restart: unless-stopped

  register-connectors:
    image: register-connectors
    hostname: register-connectors
    container_name: register-connectors
    build:
      context: .
      dockerfile: ./register-connectors/Dockerfile
      cache_from:
        - alpine:latest
    depends_on:
      - kafka-connect

  # kafka-connect-moving-average:
  #   image: kafka-connect-moving-average
  #   hostname: kafka-connect-moving-average
  #   container_name: kafka-connect-moving-average
  #   restart: unless-stopped
  #   build:
  #     context: .
  #     dockerfile: ./kafka-processor/Dockerfile
        # cache_from:
        #   - openjdk:16-alpine3.13
  #   depends_on:
  #     - zookeeper
  #     - kafka
  #     - mosquitto
  #     - mongo-client
  #     - mongo-db

  mongo-db:
    image: mongo:latest
    hostname: mongo-db
    container_name: mongo-db
    command: --bind_ip_all
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./data/mongo-db:/data
    restart: unless-stopped

  mongo-client:
    image: mongoclient/mongoclient
    hostname: mongo-client
    container_name: mongo-client
    ports:
      - 3000:3000
    expose:
      - "3000"
    environment:
      MONGO_URL: "mongodb://mongo-db:27017"
      PORT: 3000
    depends_on:
      - mongo-db
    restart: unless-stopped

      # dokumentacja
      # schemat architektury
      # srednia kroczaca